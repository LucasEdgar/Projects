/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package tela;

import entidade.Cidade;
import entidade.Estado;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import persistencia.HibernateUtil;

/**
 *
 * @author jaimedias
 */
//classe que cria a tela do cadastro de cidade.
public class CidadeTela extends javax.swing.JDialog {

//instanciando um objeto cidade para ser manipulado e persistido no banco de dados
    private Cidade cidade = new Cidade();
//lista de cidades para exibir na tela todos os cidades salvos.
    private List<Cidade> listaCidades = new ArrayList<>();
    private List<Estado> listaEstados = new ArrayList<>();

    public CidadeTela(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
//chama o método que vai montar a tabela de cidades e exibir os cidades salvos no banco.
        montaTabela();
//chama o método que valida os campos da tela.
        validaCampos("inicio");
        montaComboEstado();
    }

    public void montaComboEstado() {
        listaEstados = HibernateUtil.getSession().createQuery("from Estado order by nome").list();
        cEstado.removeAllItems();
        for (Estado est : listaEstados) {
            cEstado.addItem(est.getNome());
        }
    }

//metodo que vai validar cada componente da tela de acordo com a operação que o usuário deseja realizar.
    public void validaCampos(String operacao) {
//se a tela é o inicio, ou seja, esta abrindo pela primeira vez, vai desabilitar os campos e os botões, permitindo clica apenas nos botões novo e sair.
        if (operacao.equals("inicio")) {
//desativa ou ativa o campo nome
            cNome.setEnabled(false);
//desativa ou ativa o campo sigla
            cEstado.setEnabled(false);
//desativa ou ativa o botão novo
            btNovo.setEnabled(true);
//desativa ou ativa o botão alterar
            btAlterar.setEnabled(false);
            btExcluir.setEnabled(false);
            btSalvar.setEnabled(false);
            btCancelar.setEnabled(false);
            btSair.setEnabled(true);
// caso a operação seja novo, os campos se comportam diferente, por exemplo, os campos da tela serão habilitados, e os botões de salvar e cancelar também.
        } else if (operacao.equals("novo")) {
            cNome.setEnabled(true);
            cEstado.setEnabled(true);
            btNovo.setEnabled(false);
            btAlterar.setEnabled(false);
            btExcluir.setEnabled(false);
            btSalvar.setEnabled(true);
            btCancelar.setEnabled(true);
            btSair.setEnabled(false);
        } else if (operacao.equals("selecionado")) {
            cNome.setEnabled(false);
            cEstado.setEnabled(false);
            btNovo.setEnabled(true);
            btAlterar.setEnabled(true);
            btExcluir.setEnabled(true);
            btSalvar.setEnabled(false);
            btCancelar.setEnabled(false);
            btSair.setEnabled(true);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cCodigo = new javax.swing.JTextField();
        cNome = new javax.swing.JTextField();
        btSalvar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        cEstado = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Cadastro de Cidade");

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jLabel2.setText("Código:");

        jLabel3.setText("Nome:");

        jLabel4.setText("Estado:");

        cCodigo.setEditable(false);
        cCodigo.setText(" ");
        cCodigo.setEnabled(false);

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btNovo.setText("Novo");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        cEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cNome, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                    .addComponent(cEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btSalvar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btAlterar, btCancelar, btExcluir, btNovo, btSair, btSalvar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAlterar)
                    .addComponent(btExcluir)
                    .addComponent(btSalvar)
                    .addComponent(btCancelar)
                    .addComponent(btSair))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

// Método salvar, vai persistir ou alterar um cidade no banco de dados.
    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
//Recupera o texto digitado pelo usuário no campo nome da interface, e seta no atributo nome do objeto cidade.
        cidade.setNome(cNome.getText());

        cidade.setEstado(listaEstados.get(cEstado.getSelectedIndex()));

//chama a classe do hibernate e inicia uma nova transação com o banco.
        HibernateUtil.beginTransaction();
//recupera uma sessão do banco e executa um MERGE do objeto cidade.
//De acordo com a chave primária, o hibernate define se será persistido o objeto ou alterado no banco de dados, ou seja, se o objeto já existir no banco de dados, será alterado, se não será inserido.
        HibernateUtil.getSession().merge(cidade);
//executa o commit da transação com o banco de dados, isso vai efetivar a execução, pode ser executado um rollback, que desfaz a transação.
        HibernateUtil.commitTransaction();
//fecha a sessão com o banco de dados.
        HibernateUtil.closeSession();

//        cidade = new Cidade();
//Chama o método que limpa os campos da interface.
        limparCampos();
//chama o método que monta a tabela para trazer o cidade que acabou de ser salvo. Atualiza a tabela da interface.
        montaTabela();
//chama o método valida campos para validar os componentes da inteface.
        validaCampos("inicio");
//fim do método salvar
    }//GEN-LAST:event_btSalvarActionPerformed

//método limpa campos, serve para limpar os campos da interface
    public void limparCampos() {
//seta vazio no campo código da interface
        cCodigo.setText("");
//seta vazio no campo nome da interface
        cNome.setText("");
//seta vazio no campo sigla da interface
        cEstado.setSelectedItem(null);
    }

// metodo do botão novo, serve para iniciar um novo objeto e validar a tela para a operação NOVO.
    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
//instancia um novo objeto cidade para ser salvo no banco de dados.
        cidade = new Cidade();
//limpa os campos para o usuário poder inserir novas informações.
        limparCampos();
// valida os campos da tela para a operação novo.
        validaCampos("novo");
        montaComboEstado();
    }//GEN-LAST:event_btNovoActionPerformed

//método que é disparado quando o usuário clica em uma linha da tabela de cidades.
    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
// pega o index da linha selecionada da tabela, e passa por parametro para recuperar um objeto da lista de cidades, este objeto é atribuído ao objeto cidade global.       
        cidade = listaCidades.get(tabela.getSelectedRow());
//pega o atributo id do objeto e seta o texto do campo código da interface
        cCodigo.setText(cidade.getId().toString());
//pega o atributo nome do objeto e seta o texto do campo nome da interface
        cNome.setText(cidade.getNome());
//pega o atributo sigla do objeto e seta o texto do campo sigla da interface
        cEstado.setSelectedItem(cidade.getEstado().getNome());
//valida os campos da tela para a operação selecionado, que vai habilitar os botões editar e excluir.        
        validaCampos("selecionado");

    }//GEN-LAST:event_tabelaMouseClicked

// método do botão excluir.
    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
// o objeto cidade já esta selecionado, ou seja já existe o objeto para ser excluido.
// inicia uma nova transação com o banco de dados
        HibernateUtil.beginTransaction();
//executa um delete do objeto cidade selecionado.
        HibernateUtil.getSession().delete(cidade);
//commita a transação, ou seja efetiva.
        HibernateUtil.commitTransaction();
// fecha a sessão com o banco de dados.
        HibernateUtil.closeSession();

//chama o método que limpa os campos da tela
        limparCampos();
//        cidade = new Cidade();
// chama o método monta tabela que vai atualizar a tabela sem o cidade deletado.
        montaTabela();
// valida os campos para a operação inicio. 
        validaCampos("inicio");

        // TODO add your handling code here:
    }//GEN-LAST:event_btExcluirActionPerformed

// método do botão sair.
    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
// fecha a tela mas não mata a aplicação.
        dispose();
// Mata a aplicação, para de executar o sistema.
//        System.exit(1);
        // TODO add your handling code here:
    }//GEN-LAST:event_btSairActionPerformed

// método do botão cancelar
    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
// limpar os campos da tela        
        limparCampos();
//valida os campos para o perfil inicio.
        validaCampos("inicio");
        // TODO add your handling code here:
    }//GEN-LAST:event_btCancelarActionPerformed

// método do botão alterar, que vai simplesmente liberar os campos da tela para o usuario editar.
    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
// chama o método valida campos para o perfil novo.
        validaCampos("novo");        // TODO add your handling code here:
    }//GEN-LAST:event_btAlterarActionPerformed

//método que monta a tabela da interface que lista todos os cidades salvos no banco de dados.
    public void montaTabela() {
// utiliza do hibernate para consultar no banco de dados todos os cidades salvos, e atribui este resultado na lista de cidades global.        
        listaCidades = HibernateUtil.getSession().createQuery("from Cidade").list();
// instancia um novo objeto de modelo de tabela padrão.        
// modelo de tabela em memória
        DefaultTableModel modelo = new DefaultTableModel();
// crio as colunas desta tabela em memória, no caso o código.
        modelo.addColumn("Código");
// crio as colunas desta tabela em memória, no caso o nome.
        modelo.addColumn("Nome");
// crio as colunas desta tabela em memória, no caso o sigla.
        modelo.addColumn("Estado");

// laço de repetição que percorre cada cidade da lista de cidades
        for (Cidade cid : listaCidades) {
//para cada cidade é adicionado um nova linha na tabela em memória.
            modelo.addRow(new Object[]{cid.getId(), cid.getNome(), cid.getEstado().getNome()});
        }
// atribuo a tabela em memória para a tabela da interface.        
        tabela.setModel(modelo);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CidadeTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CidadeTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CidadeTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CidadeTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CidadeTela dialog = new CidadeTela(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btSalvar;
    private javax.swing.JTextField cCodigo;
    private javax.swing.JComboBox<String> cEstado;
    private javax.swing.JTextField cNome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
